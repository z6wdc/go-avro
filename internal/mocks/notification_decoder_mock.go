// Code generated by MockGen. DO NOT EDIT.
// Source: notification_decoder.go
//
// Generated by this command:
//
//	mockgen -source=notification_decoder.go -destination=../../mocks/notification_decoder_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/z6wdc/go-avro/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationDecoder is a mock of NotificationDecoder interface.
type MockNotificationDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationDecoderMockRecorder
	isgomock struct{}
}

// MockNotificationDecoderMockRecorder is the mock recorder for MockNotificationDecoder.
type MockNotificationDecoderMockRecorder struct {
	mock *MockNotificationDecoder
}

// NewMockNotificationDecoder creates a new mock instance.
func NewMockNotificationDecoder(ctrl *gomock.Controller) *MockNotificationDecoder {
	mock := &MockNotificationDecoder{ctrl: ctrl}
	mock.recorder = &MockNotificationDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationDecoder) EXPECT() *MockNotificationDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockNotificationDecoder) Decode(arg0 []byte) (*entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(*entity.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockNotificationDecoderMockRecorder) Decode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockNotificationDecoder)(nil).Decode), arg0)
}
