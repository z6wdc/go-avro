// Code generated by MockGen. DO NOT EDIT.
// Source: notification_encoder.go
//
// Generated by this command:
//
//	mockgen -source=notification_encoder.go -destination=../../mocks/notification_encoder_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/z6wdc/go-avro/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationEncoder is a mock of NotificationEncoder interface.
type MockNotificationEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationEncoderMockRecorder
	isgomock struct{}
}

// MockNotificationEncoderMockRecorder is the mock recorder for MockNotificationEncoder.
type MockNotificationEncoderMockRecorder struct {
	mock *MockNotificationEncoder
}

// NewMockNotificationEncoder creates a new mock instance.
func NewMockNotificationEncoder(ctrl *gomock.Controller) *MockNotificationEncoder {
	mock := &MockNotificationEncoder{ctrl: ctrl}
	mock.recorder = &MockNotificationEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationEncoder) EXPECT() *MockNotificationEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockNotificationEncoder) Encode(arg0 *entity.Notification) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockNotificationEncoderMockRecorder) Encode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockNotificationEncoder)(nil).Encode), arg0)
}
